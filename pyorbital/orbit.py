"""Compute orbital position"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_orbit.ipynb.

# %% auto 0
__all__ = ['distance', 'mean_anomaly', 'days_since_perihelion', 'equation_of_center_mean_anomally',
           'equation_of_center_true_anomally', 'true_anomally', 'eccentric_anomally_inv', 'eccentric_anomally']

# %% ../nbs/02_orbit.ipynb 2
import numpy as np
import matplotlib.pyplot as plt

# %% ../nbs/02_orbit.ipynb 3
def distance(true_anomaly, semi_maj_axis, eccentricity):
    """
    true_anomaly: radians
    semi_maj_axis: ellipse's semi major axis
    eccentricity: ellipse's eccentricity
    """
    d = semi_maj_axis * (1 - eccentricity ** 2) / (1 + eccentricity * np.cos(true_anomaly))
    return d

# %% ../nbs/02_orbit.ipynb 6
def mean_anomaly(days, orbit_duration):
    """
    days: number of days since last perihelion
    orbit_duration: duration of an orbit in days
    """
    return np.pi * 2 * days / orbit_duration

def days_since_perihelion(mean_anomaly, orbit_duration):
    """
    days: number of days since last perihelion
    orbit_duration: duration of an orbit in days
    """
    return mean_anomaly * orbit_duration / (np.pi * 2)

# %% ../nbs/02_orbit.ipynb 10
def equation_of_center_mean_anomally(mean_anomaly, eccentricity):
    """
    Ec = trueAnomally - meanAnomally
    """
    e = eccentricity
    ma = mean_anomaly
    eq_c = 2*e*np.sin(ma) + 5*e**2/4*np.sin(2*ma) + e**3/12*(13*np.sin(3*ma) - 3*np.sin(ma))
    return eq_c

def equation_of_center_true_anomally(true_anomaly, eccentricity):
    """
    Ec = trueAnomally - meanAnomally
    """
    e = eccentricity
    ta = true_anomaly
    eq_c = 2*e*np.sin(ta) + (3*e**2/4 + e**4/8)*np.sin(2*ta) - e**3/3*np.sin(3*ta) + 5*e**4/32*np.sin(4*ta)
    return eq_c

# %% ../nbs/02_orbit.ipynb 11
def true_anomally(eccentric_anomaly, eccentricity):
    return np.atan(((1+eccentricity)/(1-eccentricity))**(1/2) * np.tan(eccentric_anomaly/2)) * 2

def eccentric_anomally_inv(true_anomally, eccentricity):
    return np.atan(((1-eccentricity)/(1+eccentricity))**(1/2) * np.tan(true_anomally/2)) * 2

# %% ../nbs/02_orbit.ipynb 14
# Kepler equation:
# meanAnomally = eccentric_anomally - eccentricity * sin(eccentric_anomally)
def eccentric_anomally(mean_anomally, eccentricity, precision=.000001, method="newton-raphson"):
    """
    method: kepler or newton-raphson
    """
    change = np.inf
    ea = mean_anomally
    
    if method == "kepler":
        while(change > precision):
            new_ea = mean_anomally + eccentricity * np.sin(ea)
            change = abs(ea - new_ea)
            ea = new_ea
            
    elif method == "newton-raphson":
        if eccentricity > 0.75:
            ea = np.pi
        while(change > precision):
            new_ea = ea - (ea - eccentricity*np.sin(ea) - mean_anomally)/(1 - eccentricity*np.cos(ea))
            change = abs(ea - new_ea)
            ea = new_ea
    return ea
