"""Unit and time conversion"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_conversion.ipynb.

# %% auto 0
__all__ = ['ASTRO_UNIT', 'LIGHT_YEAR', 'PARSEC', 'SOLAR_DAY', 'SIDERAL_DAY', 'TROPICAL_YEAR', 'SIDERAL_YEAR', 'ANOMALISTIC_YEAR',
           'DRACONIC_YEAR', 'JULIAN_YEAR', 'GALACTIC_YEAR', 'dms_to_decimal', 'decimal_to_dms', 'is_leap_year']

# %% ../nbs/01_conversion.ipynb 2
import math

# %% ../nbs/01_conversion.ipynb 3
ASTRO_UNIT = 149597870700  # Astronomical unit in meter
LIGHT_YEAR = 9.461E+15     # Light-year in meter
PARSEC = 3.086E+16     # Parsec in meter

SOLAR_DAY = 24 # Interval of time for the sun to come back to the meridian. This is an average.
SIDERAL_DAY = 23.9333  # Time for a star to return at the same position
TROPICAL_YEAR = 365.2422  # Time between two vernal equinox (sun crossing equator)
SIDERAL_YEAR = 365.2564  # Star used as reference point 
ANOMALISTIC_YEAR = 365.2596  # Point of when the earth is closest to the sun
DRACONIC_YEAR = 346.6201 # Combined sun and moon motion. To predict eclipses.
JULIAN_YEAR = 365.25  # Average year lenght in Julian calendar 
GALACTIC_YEAR = 2.25E8 * SIDERAL_YEAR  # In days

# %% ../nbs/01_conversion.ipynb 4
def dms_to_decimal(degree, minute, second, sign):
    """
    Conversion from DMS format (e.g. 15°42'9") to decimal format (e.g. 15.7025).
    """
    assert (sign == 1 or sign == -1)
    degree = abs(degree)
    minute += second / 60
    decimal = degree + (minute / 60)
    return round(decimal * sign, 4)

def decimal_to_dms(decimal):
    """
    Conversion from decimal format (e.g. 15.7025) to DMS format (e.g. 15°42'9").
    """
    sign = -1 if decimal < 0 else 1
    decimal = abs(decimal)
    degree = int(decimal)
    frac, _ = math.modf(decimal)
    frac *= 60
    minute = int(frac)
    frac, _ = math.modf(frac)
    second = 60 * frac
    return degree, minute, round(second, 4), sign

# %% ../nbs/01_conversion.ipynb 6
def is_leap_year(year):
    return (year % 4 == 0) and ((year % 100 != 0) or (year % 400 == 0))
